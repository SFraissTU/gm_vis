#version 430
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

layout(location=1) uniform int width;
layout(location=2) uniform int height;
layout(location=3) uniform mat4 invViewMatrix;

struct Gaussian {
	vec4 mu_amplitude;
	mat4 invsigma;
};

layout(std430, binding=0) buffer GaussianMixture {
	int amount;
	Gaussian gaussians[];
} mixture;

void main() {
	//This assumes a fixed fov of 90°. Should rather use the projection matrix
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 pixel_center = vec2(pixel_coords) + vec2(0.5);
	vec2 pixel_uv = pixel_center / vec2(width, height);
	vec2 d = pixel_uv * 2.0 - 1.0;
	float aspectRatio = float(width) / float(height);

	vec3 origin = vec3(0, 0, 0.0);
	vec3 direction = normalize(vec3(d.x * aspectRatio, d.y, -sqrt(3)));
	vec4 p1 = vec4(origin, 1.0);
	vec4 p2 = vec4(origin + direction, 1.0);
	vec4 vp1 = invViewMatrix * p1;
	vec4 vp2 = invViewMatrix * p2;
	origin = vec3(vp1);
	direction = vec3(normalize(vp2 - vp1));

	float sum = 0;
	vec3 samplingPoint = origin + direction;
	//float diskr = pow(2*dot(direction,origin),2) - 4*dot(direction,direction)*(dot(origin,origin)-16);
	//if (diskr >= 0) {
		//sum = 1;
	//}
	//Additive Blending
//	for (int i = 0; i < 600; i++) {
//		vec3 texcoords = samplingPoint / 20.0f + vec3(0.5f);
//		sum += texture(density, texcoords).r*5.0f;// * (1.0f - i/100.0f);
//		samplingPoint += direction * 0.25f;
//	}
	//Alpha Blending
	for (int i = 600; i > 0; --i) {
		samplingPoint = origin + i*1.0f*direction;
		vec3 texcoords = samplingPoint / 20.0f + vec3(0.5f);
		float alpha = 0;
		for (int j = 0; j < mixture.amount && j <= 8; j++) {
			Gaussian gauss = mixture.gaussians[j];
			vec3 relpos = samplingPoint - gauss.mu_amplitude.xyz;
			float ex = exp(-0.5 * dot(relpos*mat3(gauss.invsigma),relpos));
			alpha += gauss.mu_amplitude.w * ex;
		}
		//float alpha = texture(density, texcoords).r;
		//sum = sum*(1-alpha) + alpha;//maybe alpha^2
		sum += alpha;
	}

	sum = clamp(sum, 0.0f, 1.0f);

	//float samp = texture(density, vec3(pixel_uv.x, pixel_uv.y, 0.5)).r;
	//vec4 pixel = vec4(samp, samp, samp, 1.0f);
	vec4 pixel = 0.9*vec4(sum, sum, sum, 1.0f) + 0.2*vec4(abs(direction), 1.0f);
	//vec4 pixel = 0.9*vec4(col, 1.0f) + 0.2*vec4(abs(direction), 1.0f);
	//vec4 pixel = vec4(sum,sum,sum,1.0f);
	//pixel.gb = vec2(0);
	//pixel.rgb = vec3(mixture.gaussians[0].invsigma[0].rgb);
	//pixel.rgb = vec3(mixture.gaussians[1].mu_amplitude.rgb);

	imageStore(img_output, pixel_coords, pixel);
}